{"ast":null,"code":"var _jsxFileName = \"/Users/fa/Documents/OpenClassrooms_Formation_Started/projet_7_Kasa/KasaGithub/kasa_G_07_05_Pm/src/components/ApartmentGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './ApartmentGrid.scss';\nimport ApartmentCard from './ApartmentCard.jsx';\n\n/* Ce composant affiche une grille d'appartements récupérée à partir d'un fichier \ndata.json. On utilise les hooks useState et useEffect pour gérer l'état des données \net effectuer des requêtes.On initialise un état local apartments avec  useState et on le passe à une div avec \nla classe grid. On fait une boucle map  pour itèrer sur chaque appartement dans la \nliste apartments et renvoie un composant ApartmentCard pour chaque appartement. */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ApartmentGrid() {\n  _s();\n  const [apartments, setApartments] = useState([]); // destructuring\n\n  useEffect(fetchApartments, []);\n\n  /* On fait un GET sur data.json avec la méthode fetch, puis on met à jour \n  l'état local apartments à l'aide useState // useEffect avec un array vide \n  => exécute cette fonction au chargement du composant*/\n\n  function fetchApartments() {\n    fetch(\"data.json\").then(res => res.json()).then(res => setApartments(res)).catch(console.error);\n  }\n\n  /* \"map\" de l'objet \"apartments\" pour générer une liste d'éléments \"ApartmentCard\" \n     en utilisant les données de chaque appartement du fichier JSON. \n     On récupère les propriéts titre de l'aprtment et l'URL de l'image de couverture imageUrl.*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: apartments.map(apartment => {\n      return /*#__PURE__*/_jsxDEV(ApartmentCard, {\n        id: apartment.id,\n        title: apartment.title,\n        imageUrl: apartment.cover\n      }, apartment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n}\n_s(ApartmentGrid, \"jO9sxuuTNhPPOjwKX3gzC7ZQEhU=\");\n_c = ApartmentGrid;\nexport default ApartmentGrid;\nvar _c;\n$RefreshReg$(_c, \"ApartmentGrid\");","map":{"version":3,"names":["React","useEffect","useState","ApartmentCard","jsxDEV","_jsxDEV","ApartmentGrid","_s","apartments","setApartments","fetchApartments","fetch","then","res","json","catch","console","error","className","children","map","apartment","id","title","imageUrl","cover","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fa/Documents/OpenClassrooms_Formation_Started/projet_7_Kasa/KasaGithub/kasa_G_07_05_Pm/src/components/ApartmentGrid.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './ApartmentGrid.scss'\nimport ApartmentCard from './ApartmentCard.jsx'\n\n/* Ce composant affiche une grille d'appartements récupérée à partir d'un fichier \ndata.json. On utilise les hooks useState et useEffect pour gérer l'état des données \net effectuer des requêtes.On initialise un état local apartments avec  useState et on le passe à une div avec \nla classe grid. On fait une boucle map  pour itèrer sur chaque appartement dans la \nliste apartments et renvoie un composant ApartmentCard pour chaque appartement. */\n\nfunction ApartmentGrid() {\n  const [apartments, setApartments] = useState([]); // destructuring\n\n  useEffect(fetchApartments, [])\n\n/* On fait un GET sur data.json avec la méthode fetch, puis on met à jour \nl'état local apartments à l'aide useState // useEffect avec un array vide \n=> exécute cette fonction au chargement du composant*/\n\n  function fetchApartments() {\n  fetch(\"data.json\")\n    .then((res) => res.json())\n    .then((res) => setApartments(res))\n    .catch(console.error)\n  }\n\n/* \"map\" de l'objet \"apartments\" pour générer une liste d'éléments \"ApartmentCard\" \n   en utilisant les données de chaque appartement du fichier JSON. \n   On récupère les propriéts titre de l'aprtment et l'URL de l'image de couverture imageUrl.*/\n    return (\n      <div className='grid'>\n        {apartments.map((apartment) => {\n          return (\n          <ApartmentCard key={apartment.id}  id={apartment.id} title={apartment.title} imageUrl={apartment.cover}/>\n        )})} \n      </div>\n    )\n  }\n\nexport default ApartmentGrid\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAC7B,OAAOC,aAAa,MAAM,qBAAqB;;AAE/C;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAMA,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElDD,SAAS,CAACS,eAAe,EAAE,EAAE,CAAC;;EAEhC;AACA;AACA;;EAEE,SAASA,eAAeA,CAAA,EAAG;IAC3BC,KAAK,CAAC,WAAW,CAAC,CACfC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEC,GAAG,IAAKJ,aAAa,CAACI,GAAG,CAAC,CAAC,CACjCE,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;EACvB;;EAEF;AACA;AACA;EACI,oBACEZ,OAAA;IAAKa,SAAS,EAAC,MAAM;IAAAC,QAAA,EAClBX,UAAU,CAACY,GAAG,CAAEC,SAAS,IAAK;MAC7B,oBACAhB,OAAA,CAACF,aAAa;QAAqBmB,EAAE,EAAED,SAAS,CAACC,EAAG;QAACC,KAAK,EAAEF,SAAS,CAACE,KAAM;QAACC,QAAQ,EAAEH,SAAS,CAACI;MAAM,GAAnFJ,SAAS,CAACC,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAyE;IAC1G,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACC;AAEV;AAACtB,EAAA,CA3BMD,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AA6BtB,eAAeA,aAAa;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}