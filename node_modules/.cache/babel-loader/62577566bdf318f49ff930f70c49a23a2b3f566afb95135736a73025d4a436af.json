{"ast":null,"code":"var _jsxFileName = \"/Users/fa/Documents/OpenClassrooms_Formation_Started/projet_7_Kasa/KasaGithub/kasa/src/components/ImageBanner.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ImageBanner.scss';\nimport ImageAbout from '../assets/background_about_cover.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ImageBanner(props) {\n  _s();\n  const pictures = props.pictures;\n  /* useState pour gérer l état de mon composant \"setCurrentPicture\"initialisé à 0 */\n  const [currentPicture, setCurrentPicture] = useState(0);\n  const getClassName = i => {\n    if (i === currentPicture) return 'show';\n    return '';\n  };\n\n  /* Gestion du Carrousel : avec les boutons flechés qui seront appelés au clic*/\n  const moveToNext = () => {\n    setCurrentPicture((currentPicture + 1) % pictures.length); // Modulo % pour revenir au début de la liste d'image.\n  };\n\n  const moveToPrevious = () => {\n    const newCurrentPicture = currentPicture - 1;\n    if (newCurrentPicture < 0) {\n      setCurrentPicture(pictures.length - 1);\n      return;\n    }\n    setCurrentPicture(currentPicture - 1);\n  };\n\n  /* Gestion du Carrousel pour la page A propos: Pour afficher 1 seule image sur la page\n     \"A propos\". S'il n'y a pas de props.picture, afficher simplement une image au hasard, \n     si non on effectue le map pour les autres images */\n  const arePicturesAvailable = () => {\n    return pictures && pictures.length > 0;\n  };\n  const getCarrouselOrDefaultImage = () => {\n    if (!pictures || pictures.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: ImageAbout,\n        className: \"show\",\n        alt: \"\",\n        width: \"0\",\n        height: \"500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this);\n    }\n    return pictures.map((pic, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: pic,\n      alt: \"\",\n      className: getClassName(i)\n    }, pic, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this));\n  };\n\n  /* On vérifie d'abord si des images sont disponibles en appelant la fonction \n     arePicturesAvailable() qui renvoie un booléen. Si des images sont disponibles, \n     il affiche deux boutons : passer à l'image et revenir à l'image précédente.\n     Les fonctions moveToNext et moveToPrevious sont appelées lors du clic */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image__banner\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image__container\",\n      children: getCarrouselOrDefaultImage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), arePicturesAvailable() && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-next\",\n        onClick: moveToNext,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chevron-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-previous\",\n        onClick: moveToPrevious,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chevron-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(ImageBanner, \"CuYLVCd7I57oqpNxTa9PjdDwroY=\");\n_c = ImageBanner;\nvar _c;\n$RefreshReg$(_c, \"ImageBanner\");","map":{"version":3,"names":["React","useState","ImageAbout","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageBanner","props","_s","pictures","currentPicture","setCurrentPicture","getClassName","i","moveToNext","length","moveToPrevious","newCurrentPicture","arePicturesAvailable","getCarrouselOrDefaultImage","src","className","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","map","pic","children","onClick","_c","$RefreshReg$"],"sources":["/Users/fa/Documents/OpenClassrooms_Formation_Started/projet_7_Kasa/KasaGithub/kasa/src/components/ImageBanner.jsx"],"sourcesContent":["import React, {useState} from 'react'\nimport './ImageBanner.scss'\nimport ImageAbout from '../assets/background_about_cover.png'\n\nexport function ImageBanner(props) {\n  const pictures = props.pictures\n  /* useState pour gérer l état de mon composant \"setCurrentPicture\"initialisé à 0 */\n  const [currentPicture, setCurrentPicture] = useState(0)\n\n  const getClassName = (i) => {\n    if (i === currentPicture) return 'show'\n    return ''\n  }\n\n  /* Gestion du Carrousel : avec les boutons flechés qui seront appelés au clic*/\n  const moveToNext =() => {\n    setCurrentPicture((currentPicture + 1) % pictures.length) // Modulo % pour revenir au début de la liste d'image.\n  }\n  const moveToPrevious =() => {\n    const newCurrentPicture = currentPicture - 1\n    if (newCurrentPicture < 0) {\n      setCurrentPicture(pictures.length -1)\n      return\n    }\n    setCurrentPicture(currentPicture - 1)\n  }\n\n   /* Gestion du Carrousel pour la page A propos: Pour afficher 1 seule image sur la page\n      \"A propos\". S'il n'y a pas de props.picture, afficher simplement une image au hasard, \n      si non on effectue le map pour les autres images */\n  const arePicturesAvailable = () => {\n    return pictures && pictures.length > 0\n  }\n\n  const getCarrouselOrDefaultImage = () => {\n    if (!pictures || pictures.length === 0) {\n      return <img src = {ImageAbout} className='show' alt='' width = '0' height = '500' />\n      }\n      return pictures.map((pic, i) => (\n        <img key={pic} src = {pic} alt='' className = {getClassName(i)}></img>\n      ))\n    }\n\n  /* On vérifie d'abord si des images sont disponibles en appelant la fonction \n     arePicturesAvailable() qui renvoie un booléen. Si des images sont disponibles, \n     il affiche deux boutons : passer à l'image et revenir à l'image précédente.\n     Les fonctions moveToNext et moveToPrevious sont appelées lors du clic */\n  return (\n\n    <div className='image__banner'>\n      <div className='image__container'>{getCarrouselOrDefaultImage()}\n      </div>\n      \n      {arePicturesAvailable() && ( \n        \n        <>  \n          <button className='btn btn-next' onClick={moveToNext}>\n            <i className='fas fa-chevron-left'></i>\n          </button>\n          <button className='btn btn-previous' onClick={moveToPrevious}>\n            <i className='fas fa-chevron-right'></i>\n          </button>\n        </> \n\n      )}\n\n    </div>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}